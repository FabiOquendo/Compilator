/*
 * generated by Xtext 2.10.0
 */
grammar InternalExpression;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.services.ExpressionGrammarAccess;

}
@parser::members {
	private ExpressionGrammarAccess grammarAccess;

	public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContainer
entryRuleContainer
:
{ before(grammarAccess.getContainerRule()); }
	 ruleContainer
{ after(grammarAccess.getContainerRule()); } 
	 EOF 
;

// Rule Container
ruleContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerAccess().getGroup()); }
		(rule__Container__Group__0)
		{ after(grammarAccess.getContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrientation
entryRuleOrientation
:
{ before(grammarAccess.getOrientationRule()); }
	 ruleOrientation
{ after(grammarAccess.getOrientationRule()); } 
	 EOF 
;

// Rule Orientation
ruleOrientation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrientationAccess().getAlternatives()); }
		(rule__Orientation__Alternatives)
		{ after(grammarAccess.getOrientationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getNameAssignment()); }
		(rule__Column__NameAssignment)
		{ after(grammarAccess.getColumnAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabel
entryRuleLabel
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelAccess().getGroup()); }
		(rule__Label__Group__0)
		{ after(grammarAccess.getLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextView
entryRuleTextView
:
{ before(grammarAccess.getTextViewRule()); }
	 ruleTextView
{ after(grammarAccess.getTextViewRule()); } 
	 EOF 
;

// Rule TextView
ruleTextView 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextViewAccess().getGroup()); }
		(rule__TextView__Group__0)
		{ after(grammarAccess.getTextViewAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComboView
entryRuleComboView
:
{ before(grammarAccess.getComboViewRule()); }
	 ruleComboView
{ after(grammarAccess.getComboViewRule()); } 
	 EOF 
;

// Rule ComboView
ruleComboView 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComboViewAccess().getGroup()); }
		(rule__ComboView__Group__0)
		{ after(grammarAccess.getComboViewAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleButton
entryRuleButton
:
{ before(grammarAccess.getButtonRule()); }
	 ruleButton
{ after(grammarAccess.getButtonRule()); } 
	 EOF 
;

// Rule Button
ruleButton 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getButtonAccess().getGroup()); }
		(rule__Button__Group__0)
		{ after(grammarAccess.getButtonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getContainerParserRuleCall_0()); }
		ruleContainer
		{ after(grammarAccess.getElementAccess().getContainerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getTableParserRuleCall_1()); }
		ruleTable
		{ after(grammarAccess.getElementAccess().getTableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getLabelParserRuleCall_2()); }
		ruleLabel
		{ after(grammarAccess.getElementAccess().getLabelParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getTextViewParserRuleCall_3()); }
		ruleTextView
		{ after(grammarAccess.getElementAccess().getTextViewParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getComboViewParserRuleCall_4()); }
		ruleComboView
		{ after(grammarAccess.getElementAccess().getComboViewParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getButtonParserRuleCall_5()); }
		ruleButton
		{ after(grammarAccess.getElementAccess().getButtonParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Orientation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrientationAccess().getVerticalLineKeyword_0()); }
		'|'
		{ after(grammarAccess.getOrientationAccess().getVerticalLineKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrientationAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getOrientationAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementsAssignment_0()); }
	(rule__Model__ElementsAssignment_0)
	{ after(grammarAccess.getModelAccess().getElementsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getModelAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Container__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__0__Impl
	rule__Container__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getNameAssignment_0()); }
	(rule__Container__NameAssignment_0)
	{ after(grammarAccess.getContainerAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__1__Impl
	rule__Container__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getOrientationParserRuleCall_1()); }
	(ruleOrientation)?
	{ after(grammarAccess.getContainerAccess().getOrientationParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__2__Impl
	rule__Container__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__3__Impl
	rule__Container__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getElementsAssignment_3()); }
	(rule__Container__ElementsAssignment_3)
	{ after(grammarAccess.getContainerAccess().getElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__4__Impl
	rule__Container__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getGroup_4()); }
	(rule__Container__Group_4__0)*
	{ after(grammarAccess.getContainerAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getContainerAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Container__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group_4__0__Impl
	rule__Container__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getContainerAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getElementsAssignment_4_1()); }
	(rule__Container__ElementsAssignment_4_1)
	{ after(grammarAccess.getContainerAccess().getElementsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_0()); }
	(rule__Table__NameAssignment_0)
	{ after(grammarAccess.getTableAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getTableAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColumnsAssignment_2()); }
	(rule__Table__ColumnsAssignment_2)
	{ after(grammarAccess.getTableAccess().getColumnsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getGroup_3()); }
	(rule__Table__Group_3__0)*
	{ after(grammarAccess.getTableAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getGreaterThanSignKeyword_4()); }
	'>'
	{ after(grammarAccess.getTableAccess().getGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_3__0__Impl
	rule__Table__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getTableAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColumnsAssignment_3_1()); }
	(rule__Table__ColumnsAssignment_3_1)
	{ after(grammarAccess.getTableAccess().getColumnsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getLbl_Keyword_0()); }
	'lbl_'
	{ after(grammarAccess.getLabelAccess().getLbl_Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getNameAssignment_1()); }
	(rule__Label__NameAssignment_1)
	{ after(grammarAccess.getLabelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TextView__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextView__Group__0__Impl
	rule__TextView__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextView__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextViewAccess().getTxt_Keyword_0()); }
	'txt_'
	{ after(grammarAccess.getTextViewAccess().getTxt_Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextView__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextView__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextView__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextViewAccess().getNameAssignment_1()); }
	(rule__TextView__NameAssignment_1)
	{ after(grammarAccess.getTextViewAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComboView__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComboView__Group__0__Impl
	rule__ComboView__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComboView__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComboViewAccess().getAsteriskKeyword_0()); }
	'*'
	{ after(grammarAccess.getComboViewAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComboView__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComboView__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComboView__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComboViewAccess().getNameAssignment_1()); }
	(rule__ComboView__NameAssignment_1)
	{ after(grammarAccess.getComboViewAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Button__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Button__Group__0__Impl
	rule__Button__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getButtonAccess().getBtn_Keyword_0()); }
	'btn_'
	{ after(grammarAccess.getButtonAccess().getBtn_Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Button__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getButtonAccess().getNameAssignment_1()); }
	(rule__Button__NameAssignment_1)
	{ after(grammarAccess.getButtonAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsContainerParserRuleCall_0_0()); }
		ruleContainer
		{ after(grammarAccess.getModelAccess().getElementsContainerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getContainerAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__ElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getElementsElementParserRuleCall_3_0()); }
		ruleElement
		{ after(grammarAccess.getContainerAccess().getElementsElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__ElementsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getElementsElementParserRuleCall_4_1_0()); }
		ruleElement
		{ after(grammarAccess.getContainerAccess().getElementsElementParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_2_0()); }
		ruleColumn
		{ after(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_1_0()); }
		ruleColumn
		{ after(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextView__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextViewAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTextViewAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComboView__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComboViewAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getComboViewAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getButtonAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getButtonAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
