/*
 * generated by Xtext 2.10.0
 */
package xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalExpressionParser;
import xtext.services.ExpressionGrammarAccess;

public class ExpressionParser extends AbstractContentAssistParser {

	@Inject
	private ExpressionGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalExpressionParser createParser() {
		InternalExpressionParser result = new InternalExpressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getOrientationAccess().getAlternatives(), "rule__Orientation__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
					put(grammarAccess.getContainerAccess().getGroup_4(), "rule__Container__Group_4__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getTableAccess().getGroup_3(), "rule__Table__Group_3__0");
					put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
					put(grammarAccess.getTextViewAccess().getGroup(), "rule__TextView__Group__0");
					put(grammarAccess.getComboViewAccess().getGroup(), "rule__ComboView__Group__0");
					put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
					put(grammarAccess.getModelAccess().getElementsAssignment_0(), "rule__Model__ElementsAssignment_0");
					put(grammarAccess.getContainerAccess().getNameAssignment_0(), "rule__Container__NameAssignment_0");
					put(grammarAccess.getContainerAccess().getElementsAssignment_3(), "rule__Container__ElementsAssignment_3");
					put(grammarAccess.getContainerAccess().getElementsAssignment_4_1(), "rule__Container__ElementsAssignment_4_1");
					put(grammarAccess.getTableAccess().getNameAssignment_0(), "rule__Table__NameAssignment_0");
					put(grammarAccess.getTableAccess().getColumnsAssignment_2(), "rule__Table__ColumnsAssignment_2");
					put(grammarAccess.getTableAccess().getColumnsAssignment_3_1(), "rule__Table__ColumnsAssignment_3_1");
					put(grammarAccess.getColumnAccess().getNameAssignment(), "rule__Column__NameAssignment");
					put(grammarAccess.getLabelAccess().getNameAssignment_1(), "rule__Label__NameAssignment_1");
					put(grammarAccess.getTextViewAccess().getNameAssignment_1(), "rule__TextView__NameAssignment_1");
					put(grammarAccess.getComboViewAccess().getNameAssignment_1(), "rule__ComboView__NameAssignment_1");
					put(grammarAccess.getButtonAccess().getNameAssignment_1(), "rule__Button__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalExpressionParser typedParser = (InternalExpressionParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExpressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
