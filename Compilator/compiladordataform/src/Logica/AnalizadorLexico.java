/* Generated By:JavaCC: Do not edit this line. AnalizadorLexico.java */
package Logica;
import java.util.*;
public class AnalizadorLexico implements AnalizadorLexicoConstants {
   private static Hashtable ST= new Hashtable();
   private static String resultado="";
   static int numero = 0;
   static String ambito="";
   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {
      System.out.printf("%-35s%-20s%-10s%-10s\u005cn",n + "- Lexema:" + lexema, "\u0009Token: "+  token , "\u0009Linea: "+ nL , "\u0009Columna: " + nC);
   }

   private static void grabarDatosPieza(int n, String token, Token pieza) {
      grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn );
   }

        public static String getResultado() {
          if(resultado.equals(""))
          resultado="No se han encontrado errores en el analisis";
          return resultado;
        }
        public static void setResultado(String a) {
          resultado=a;
        }
   public static Hashtable getSymbolTable() {
      return  ST;
   }

   public static void reportarError(String mensaje) {
     resultado+="Error Semantico en la seccion "+ ambito+"\u005cn"+mensaje+"\u005cn\u005cn";
   }

   public static void validarDeclaracionEstilo(String componente,String estilo, String valor) {
        if(estilo.equals("width")|estilo.equals("height")|estilo.equals("Tama\u00f1oFuente"))
        {
          if(!valor.equals("Tama\u00f1o")) {
                reportarError("Se esperaba un Tama\u00f1o en px para definir la propiedad " + estilo+" del componente "+ componente);
          };
        }
        else if(estilo.equals("EstiloColor")) {
         if(!valor.equals("Color")) {
                reportarError("Se esperaba un Color Hexadecimal para definir el " + estilo +" del componente "+ componente);
         };
        }else if(estilo.equals("Fuente")) {
          if(!valor.equals("Fuente")) {
                reportarError("Se esperaba una Fuente de letra para definir la " + estilo +" del componente "+ componente);
          };
        }else if(estilo.equals("EstiloFuente")) {
          if(!valor.equals("EstiloFuente")) {
                reportarError("Se esperaba un Estilo de fuente (bold, italic) para definir el " + estilo +" del componente "+ componente);
          };
        }

   }


   public static void validarDeclaracion(String token, String estilo) {
     SymbolTable simbolo=(SymbolTable) ST.get(token);
     if(simbolo!=null) {
       String tipo=simbolo.getTipo();
       if(tipo.equals("Tabla")){
         if(!(estilo.equals("width")||estilo.equals("height")))
         {
           reportarError("el Componente "+ token+ " es una tabla y no puede tener asigandos valores distintos a width o height");
           return;
         };
           };
           if (tipo.equals("Patron")){
           reportarError("el Componente "+ token+ "  es un Patron y no puede tener elementos de estilos asociados a el");
                   return;
           };
           if (tipo.equals("Variable")) {
             reportarError("el Componente "+ token+ "  es una Variable y no puede tener estilos asociados");
             return;
           };
     }
   };
   public AnalizadorLexico() {}

  public static void main(String args []) throws ParseException
  {

        try
        {
           java.io.InputStream inputstream = new java.io.FileInputStream("src/archivoPrueba.shtml");
       System.out.println("-------------------------------- Iniciando An\u00e1lisis L\u00e9xico para el archivo archivoPrueba ----------------------------");
       AnalizadorLexico parser = new AnalizadorLexico(inputstream);
           parser.Programa();


           System.out.println("------------------------------------------------ Fin de an\u00e1lisis L\u00e9xico -------------------------------------------------");
           System.out.println("no se han hallado errores l\u00e9xicos");
       String temp;
        SymbolTable temp2;
                Enumeration t = ST.keys();

     while ( t.hasMoreElements() == true ) {

          temp = (String)t.nextElement();
          temp2 = (SymbolTable)ST.get(temp);
          System.out.println(temp);
          if ( temp2.tipo != null )
            System.out.println(" type = " + temp2.tipo);
          if ( temp2.valor != null )
            System.out.println(" value = " + temp2.valor);

    }


    }catch(TokenMgrError te)
        {
           System.err.println("Error");
           System.err.println(te.getMessage());

        }
    catch(ParseException e)
        {
           System.out.println("Analizador: Se han encontrado errores en el analisis.");
           System.out.println(e.getMessage());
        }
        catch (java.io.FileNotFoundException e) {
                System.out.println("El archivo especificado no se encuentra o no se puede leer");
        }
  }

  static final public void Programa() throws ParseException {
          ST.clear();
    declaraciones();
    expresionFinal();
    widgets();
  }

  static final public void widgets() throws ParseException {
                  ambito = "Widtget";
    jj_consume_token(INICIOWIDGET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
    case IDENTIFICADOR:
    case COMBOBOX:
    case CAMPOTEXTO:
    case LABEL:
    case BOTON:
    case PATRON:
    case 43:
      sentencias();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(FINWIDGET);
  }

  static final public void declaraciones() throws ParseException {
                        ambito="Declaracion";
    jj_consume_token(INICIODECLARACION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
    case IDENTIFICADOR:
    case COMBOBOX:
    case CAMPOTEXTO:
    case LABEL:
    case BOTON:
    case PATRON:
    case 43:
      sentencias();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(FINDECLARACION);
  }

  static final public void expresionFinal() throws ParseException {
                         ambito="Expresion";
    jj_consume_token(INICIOEXPRESION);
    sentencias();
    jj_consume_token(FINEXPRESION);
  }

  static final public void sentencias() throws ParseException {
    sentencia();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
    case IDENTIFICADOR:
    case COMBOBOX:
    case CAMPOTEXTO:
    case LABEL:
    case BOTON:
    case PATRON:
    case 43:
      sentencias();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void sentencia() throws ParseException {
    try {
      if (jj_2_1(2)) {
        ListaComponentes();
        jj_consume_token(PUNTOYCOMA);
      } else if (jj_2_2(2)) {
        declaracion();
        jj_consume_token(PUNTOYCOMA);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ORIENTACION:
        case IDENTIFICADOR:
        case COMBOBOX:
        case CAMPOTEXTO:
        case LABEL:
        case BOTON:
        case PATRON:
        case 43:
          asignacion();
          jj_consume_token(PUNTOYCOMA);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
    resultado+="Error en: "+ambito+"\u005cn"+e.toString()+"\u005cn";
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != PUNTOYCOMA);
    }
  }

  static final public void Interfaz() throws ParseException {
 Token tkn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      tkn = jj_consume_token(IDENTIFICADOR);
                       ST.put(tkn.image,new SymbolTable("INTERFAZ",tkn.image));
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
      jj_consume_token(ORIENTACION);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(ABRIRLLAVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
    case IDENTIFICADOR:
    case COMBOBOX:
    case CAMPOTEXTO:
    case LABEL:
    case BOTON:
    case PATRON:
    case 43:
      ListaComponentes();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(CERRARLLAVE);
  }

  static final public void ListaComponentes() throws ParseException {
    Componente();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEPARADOR:
      jj_consume_token(SEPARADOR);
      ListaComponentes();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public String Componente() throws ParseException {
 Token tkn;
 String aux;
    if (jj_2_3(2)) {
      aux = Contenedor();
                    {if (true) return aux;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMPOTEXTO:
        tkn = jj_consume_token(CAMPOTEXTO);
                                                      ST.put(tkn.image,new SymbolTable("Campo de Texto",tkn.image)); {if (true) return tkn.image;}
        break;
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_4(2)) {
          aux = Tabla();
                                                                                                                                                                   {if (true) return aux;}
        } else if (jj_2_5(2)) {
          aux = Atributo();
                                                                                                                                                                                                              {if (true) return aux;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMBOBOX:
            tkn = jj_consume_token(COMBOBOX);
                                                                                                                                                                                                                                             ST.put(tkn.image,new SymbolTable("ComboBox",tkn.image)); {if (true) return tkn.image;}
            break;
          case BOTON:
            tkn = jj_consume_token(BOTON);
                  ST.put(tkn.image,new SymbolTable("Boton",tkn.image));{if (true) return tkn.image;}
            break;
          case LABEL:
            tkn = jj_consume_token(LABEL);
                                                                                                         ST.put(tkn.image,new SymbolTable("Label",tkn.image));{if (true) return tkn.image;}
            break;
          case PATRON:
            tkn = jj_consume_token(PATRON);
                   ST.put(tkn.image,new SymbolTable("Patron",tkn.image));{if (true) return tkn.image;}
            break;
          case IDENTIFICADOR:
            tkn = jj_consume_token(IDENTIFICADOR);
                                                                                                                  if(ST.get(tkn.image)==null) reportarError("la Variabe: "+tkn.image+" No esta declarada previamente");{if (true) return tkn.image;}
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Contenedor() throws ParseException {
                      Token tkn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      tkn = jj_consume_token(IDENTIFICADOR);
                        ST.put(tkn.image,new SymbolTable("Contenedor",tkn.image));
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
      jj_consume_token(ORIENTACION);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(43);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORIENTACION:
    case IDENTIFICADOR:
    case COMBOBOX:
    case CAMPOTEXTO:
    case LABEL:
    case BOTON:
    case PATRON:
    case 43:
      ListaComponentes();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(44);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDEBORDER:
      jj_consume_token(HIDEBORDER);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
                                                                                                                                                 {if (true) return "contendor";}
    throw new Error("Missing return statement in function");
  }

  static final public String Tabla() throws ParseException {
                 Token tkn;
    tkn = jj_consume_token(IDENTIFICADOR);
                        ST.put(tkn.image,new SymbolTable("Tabla",tkn.image));
    jj_consume_token(SIMBOLOMENOR);
    Columnas();
    jj_consume_token(SIMBOLOMAYOR);
                                                                                                                               {if (true) return tkn.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Atributo() throws ParseException {
                    Token tkn;
    tkn = jj_consume_token(IDENTIFICADOR);
                        ST.put(tkn.image,new SymbolTable("Atributo",tkn.image));
                                                                                    {if (true) return tkn.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Columnas() throws ParseException {
                  Token tkn;
    tkn = jj_consume_token(IDENTIFICADOR);
                        ST.put(tkn.image,new SymbolTable("Columna",tkn.image));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEPARADOR:
      jj_consume_token(SEPARADOR);
      Columnas();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void declaracion() throws ParseException {
                     Token tkn;
    tkn = jj_consume_token(IDENTIFICADOR);
                        ST.put(tkn.image,new SymbolTable("Variable",tkn.image));
    jj_consume_token(SIMBOLOASIGNACION);
    ListaComponentes();
  }

  static final public void asignacion() throws ParseException {
                   String token;String estilo;String valor;
    token = Componente();
    estilo = propiedadesComponentes();
                                                     validarDeclaracion(token,estilo);
    jj_consume_token(SIMBOLOASIGNACION);
    valor = valor();
                                                                                                                           validarDeclaracionEstilo(token,estilo,valor);
  }

  static final public String propiedadesComponentes() throws ParseException {
                                  Token tkn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESTILOWIDTH:
      tkn = jj_consume_token(ESTILOWIDTH);
                    {if (true) return "width";}
      break;
    case ESTILOHEIGHT:
      tkn = jj_consume_token(ESTILOHEIGHT);
                     {if (true) return "height";}
      break;
    case ESTILOCOLOR:
      tkn = jj_consume_token(ESTILOCOLOR);
                    {if (true) return "EstiloColor";}
      break;
    case ESTILOTIPOFUENTE:
      tkn = jj_consume_token(ESTILOTIPOFUENTE);
                         {if (true) return "Fuente";}
      break;
    case ESTILOTAMFUENTE:
      tkn = jj_consume_token(ESTILOTAMFUENTE);
                        {if (true) return "Tama\u00f1oFuente";}
      break;
    case ESTILOFUENTE:
      tkn = jj_consume_token(ESTILOFUENTE);
                     {if (true) return "EstiloFuente";}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String valor() throws ParseException {
                 Token tkn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLORHEXADECIMAL:
      jj_consume_token(COLORHEXADECIMAL);
                      {if (true) return "Color";}
      break;
    case BOLD:
      jj_consume_token(BOLD);
          {if (true) return "EstiloFuente";}
      break;
    case ITALIC:
      jj_consume_token(ITALIC);
              {if (true) return "EstiloFuente";}
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      jj_consume_token(PX);
                  {if (true) return "Tama\u00f1o";}
      break;
    case ARIAL:
      jj_consume_token(ARIAL);
          {if (true) return "Fuente";}
      break;
    case TAHOMA:
      jj_consume_token(TAHOMA);
            {if (true) return "Fuente";}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(SIMBOLOASIGNACION)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(PUNTOYCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(SIMBOLOMENOR)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(SEPARADOR)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(PATRON)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(BOTON)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(CAMPOTEXTO)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(COMBOBOX)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorLexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7e040,0x7e040,0x7e040,0x7e040,0x2000,0x40,0x7e040,0x100000,0x8000,0x76000,0x2000,0x40,0x7e040,0x0,0x100000,0xf0000000,0x8000780,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x800,0x800,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x10,0x0,0x3,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AnalizadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorLexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AnalizadorLexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorLexico(AnalizadorLexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
